@model proclena_backend.Models.Product

@{
    ViewBag.Title = "Create Product";
}

<h2 class="text-center mt-4">Create Product</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", @class = "container mt-4 shadow p-4 rounded bg-light", id = "createProductForm" }))
{
    @Html.AntiForgeryToken()

    <div class="back-button-container">
        <button type="button" class="btn btn-secondary shadow-sm" onclick="window.location.href='@Url.Action("Index", "Products")'">
            <i class="fas fa-arrow-left"></i>
        </button>
    </div>
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <h4 class="mb-4 text-primary">Product Information</h4>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <!-- Product Name -->
            <div class="mb-3">
                @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "form-label text-primary" })
                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control shadow-sm p-2", required = "required" } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
            </div>

            <!-- Product Category -->
            <div class="mb-3">
                @Html.LabelFor(model => model.ProductCategory, htmlAttributes: new { @class = "form-label text-primary" })
                @Html.DropDownListFor(model => model.ProductCategory, new SelectList(new List<string>
                {
                    "Cleaning Tools",
                    "All-Purpose Cleaners",
                    "Surface Care & Protection",
                    "Pet Stain & Odor Remover",
                    "Carpet & Floor Cleaners",
                    "Kitchen Cleaners",
                    "Glass Cleaners",
                    "Drain & Septic Care"
                }), "Select Category", new { @class = "form-select shadow-sm p-2", required = "required" })
                @Html.ValidationMessageFor(model => model.ProductCategory, "", new { @class = "text-danger" })
            </div>

            <!-- Product Image -->
            <div class="mb-3">
                @Html.Label("Product Image", htmlAttributes: new { @class = "form-label text-primary" })
                <input type="file" name="productImageFile" class="form-control shadow-sm p-2" required />
                @Html.ValidationMessage("ProductImage", "", new { @class = "text-danger" })
            </div>

            <!-- Product Price -->
            <div class="mb-3">
                @Html.LabelFor(model => model.ProductPrice, htmlAttributes: new { @class = "form-label text-primary" })
                @Html.EditorFor(model => model.ProductPrice, new { htmlAttributes = new { @class = "form-control shadow-sm p-2", required = "required" } })
                @Html.ValidationMessageFor(model => model.ProductPrice, "", new { @class = "text-danger" })
            </div>

            <!-- Product Properties -->
            <div class="mb-3">
                @Html.Label("Product Properties", htmlAttributes: new { @class = "form-label text-primary" })
                <div id="productPropertiesContainer" class="mb-3">
                    <!-- Container for dynamically added properties -->
                </div>
                <button type="button" class="btn btn-primary shadow-sm" id="addPropertyBtn"><i class="fas fa-plus"></i> Add Property</button>
                @Html.ValidationMessageFor(model => model.ProductProperties, "", new { @class = "text-danger" })
            </div>

            <!-- Product Description -->
            <div class="mb-3">
                @Html.LabelFor(model => model.ProductDescription, htmlAttributes: new { @class = "form-label text-primary" })
                @Html.EditorFor(model => model.ProductDescription, new { htmlAttributes = new { @class = "form-control shadow-sm p-2", required = "required" } })
                @Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "text-danger" })
            </div>

            <!-- Submit Button -->
            <div class="mb-3 text-center">
                <input type="submit" value="Create" class="btn btn-success shadow-lg px-4 py-2" />
            </div>
        </div>
    </div>
}



<!-- Custom JS for Dynamic Properties -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("createProductForm");
        const addPropertyBtn = document.getElementById("addPropertyBtn");
        const productPropertiesContainer = document.getElementById("productPropertiesContainer");

        addPropertyBtn.addEventListener("click", function () {
            const propertyIndex = productPropertiesContainer.children.length;

            const propertyDiv = document.createElement("div");
            propertyDiv.className = "row mb-3 animated fadeIn";

            propertyDiv.innerHTML = `
                <div class="col-md-5">
                    <div class="mb-3">
                        <label for="ProductProperties_${propertyIndex}__Key" class="form-label text-primary">Property Name</label>
                        <input type="text" name="ProductProperties[${propertyIndex}].Key" class="form-control shadow-sm p-2" required />
                    </div>
                </div>
                <div class="col-md-5">
                    <div class="mb-3">
                        <label for="ProductProperties_${propertyIndex}__Value" class="form-label text-primary">Property Value</label>
                        <input type="text" name="ProductProperties[${propertyIndex}].Value" class="form-control shadow-sm p-2" required />
                    </div>
                </div>
                <div class="col-md-2 d-flex align-items-center">
                    <button type="button" class="btn btn-danger shadow-sm removePropertyBtn"><i class="fas fa-trash-alt"></i> Remove</button>
                </div>
            `;

            productPropertiesContainer.appendChild(propertyDiv);

            // Add event listener for removing property
            propertyDiv.querySelector(".removePropertyBtn").addEventListener("click", function () {
                this.closest(".row").classList.add("fadeOut");
                setTimeout(() => {
                    this.closest(".row").remove();
                }, 300);
            });
        });

        form.addEventListener("submit", function (event) {
            if (!this.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
                this.reportValidity();
            }
        });
    });
</script>

<!-- Include Font Awesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<!-- Custom CSS for Responsive Design and Styling -->
<style>
    #createProductForm {
        position: relative;
    }

    .back-button-container {
        position: absolute;
        top: -50px; /* Adjust based on your layout */
        left: 0;
        z-index: 10; /* Ensures the button is on top of other elements */
    }

    .form-control:focus, .form-select:focus {
        border-color: #007bff;
        box-shadow: 0 0 8px rgba(0, 123, 255, 0.25);
    }

    .btn {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

    .animated {
        animation-duration: 0.5s;
    }

    .fadeIn {
        animation-name: fadeIn;
    }

    .fadeOut {
        animation-name: fadeOut;
    }
    }
</style>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}